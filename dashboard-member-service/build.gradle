plugins {
    id 'com.palantir.docker' version '0.35.0'
    id 'java-test-fixtures'
}

bootJar.enabled = true
jar.enabled = false

group = 'com.wook.top.member'
version = '1.0.0'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    runtimeOnly 'com.mysql:mysql-connector-j'
    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // queryDSL 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api' // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api' // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드

    implementation(project(":dashboard-common"))
    implementation(project(":core-web"))
    implementation(project(":client-member"))
    testCompileOnly 'com.h2database:h2'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation(testFixtures(project(":core-web")))
}

bootJar {
    launchScript()
    manifest {
        attributes 'Start-Class': 'com.wook.top.MemberServiceApplication'
    }
}

docker {
    println(tasks.bootJar.outputs.files)
    name project.name + ":" + version
    dockerfile file("../Dockerfile")
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
    tags project.customTag
}

//Querydsl 설정부
def generated = 'src/main/generated'

//querydsl QClass 파일 생성위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}